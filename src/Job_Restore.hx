package;

import djNode.app.FFmpegAudio;
import djNode.task.FakeTask;
import djNode.task.Job;
import djNode.task.Task.Qtask;
import djNode.task.Task_ExtractFile;
import djNode.tools.CDInfo;
import djNode.tools.FileTool;
import djNode.tools.LOG;
import js.node.Fs;
import js.node.Path;
import CDC;


/** 
 * Create a job that will Restore a file.
 * ---------------------------------------------
 * This job gets running parameters from the 
 * taskData object which is set in the CDC class
 * Also might use some CDC static vars.
 * ---------------------------------------------
 * onFail emits these codes : ( feature still in development and not used!! )
 * 		user 		: user error ?
 * 		IO 			: write access problem, not enough free space?>
 * 		corrupt 	: ARC is corrupt!
 **/
class Job_Restore extends Job
{
	
	// Pointer to sharedData, I am doing this to get intellisense 
	var par:CDCRunParameters;

	//====================================================;
	override public function start():Void 
	{
		// Easy access, intellisense
		par = cast sharedData;
		
		#if debug 
		if (CDC.simulatedRun) {
		 addQueue_simulate(); super.start(); return;
		}
		#end
		
		add(new Task_CheckFFMPEG());
		
		// REMEMBER : Tasks staring with "-" DO NOT REPORT STATUS!!!!
		// -- Precheck
		add(new Qtask("-prerun", function(t:Qtask) {
			
			if (!FileTool.pathExists(par.input)) {
				t._fail('File "${par.input}" does not exist');
				return;
			}
			
			// NOTE: File existence is checked by FileExtractor_Task
			if (FileTool.getFileExt(par.input) != CDC.CDCRUSH_EXTENSION) {
				t._fail('Input file is NOT a [.${CDC.CDCRUSH_EXTENSION}] file', 'user');
				return;
			}

			// Try to create the temp dir, which is input filename specific
			if (!CDC.createTempDir(par)) {
				t._fail('Could not create tempdir at "${par.tempDir}"' , "IO"); 
				return;
			}
			
			// Get ARC filesize
			par.sizeBefore = Std.int(Fs.statSync(par.input).size);
			
			// Send this object to the next Task, which should be TASK_EXTRACT_FILE
			t._dataSend( { 
				input:par.input, 
				output:par.tempDir 
				});
			
			t._complete();
		}));
		
		// Predefined task that will extract a file to a dir
		// The parameters are going to be fetched from the previous task!
		add(new Task_ExtractFile());
		
		// --
		add(new Qtask("-loadcdinfo", function(t:Qtask) {
			par.cd = new CDInfo();
			try{
				par.cd.loadSettingsFile(Path.join(par.tempDir, CDC.CDCRUSH_SETTINGS));
			}catch (e:String) {
				t._fail(e, 'corrupt');
			}
			
			// Set generated files info now, They don't exist yet
			par.imagePath = Path.join(CDC.batch_outputDir, par.cd.TITLE + ".bin");
			par.cuePath = Path.join(CDC.batch_outputDir, par.cd.TITLE + ".cue");
			
			// Add as many tasks as there are tracks.
			var c = par.cd.tracks_total;
			while (--c >= 0) {
				this.addNext(new Task_RestoreTrack(par.cd.tracks[c]));
			}
			
			t._complete();
			
		}));
		
		// -- Tracks should have been restored now, proceed to join them
		add(new Task_JoinTracks());
		
		// -- Image is ready at output folder
		//    .Create the CUE file and delete leftovers
		add(new Qtask("-finalize", function(t:Qtask) {
			par.sizeAfter = Std.int(Fs.statSync(par.imagePath).size);
			
			LOG.log('Creating CUE at ${par.cuePath}');
			par.cd.saveAs_Cue(par.cuePath, false, "GENERATED BY CDCRUSH " + CDC.PROGRAM_VERSION);
			
			LOG.log('Clearing temp dir');
			Fs.unlinkSync(Path.join(par.tempDir, CDC.CDCRUSH_SETTINGS));
			Fs.rmdirSync(par.tempDir);
			
			t._complete();
		}));
		
		super.start();
	}//---------------------------------------------------;
	
	
	//====================================================;
	// SIMULATE A RUN TO CHECK THE PROGRESS INDICATORS
	//====================================================;
	#if debug function addQueue_simulate()
	{
		// Report some bogus values.		
		par.input = "test.arc";
		par.sizeBefore = 1660000;
		par.sizeAfter = 16040003;
		par.imagePath = "c:\\game.bin";
		par.cuePath = "c:\\game.cue";
			
		add(new FakeTask("Extracting", "progress", 0.5));
		add(new FakeTask("Restoring track 1", "progress", 0.3));
		add(new FakeTask("Restoring track 2", "progress", 0.3));
		add(new FakeTask("Restoring track 3", "progress", 0.3));
		add(new FakeTask("Joining Tracks", "steps", 0.1));
	}//---------------------------------------------------;
	#end
	
}// --